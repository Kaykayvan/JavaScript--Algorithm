/**Created by KayVan on 2016/10/7.
 * @desc：斐波那契列函数
 * @param：count（Number）
 * return: result{Number}第count个fibonacci值，计数从0开始。
 * fibonacci数列为：[1,1,2,3,5,8,13,21,34...],
 * 则getNthfibonacci(0)返回值为1，getNthfibonacci(4)返回值为5.
 */

//非递归实现
function getNthFibonacci(count) {
    //参数判断
    var count = parseFloat(count );
    if (isNaN(count) || count<0){
        return 0;
    }else if(count<=1){
        return 1;
    }else{
        var first = 1,
            second = 1,
            third = 0;
        for(var i=2;i<=count;i++){
            third=first+second;
            first=second;
            second=third;
        }
        return third;
    }
}


//递归实现
function getNthFibonacci(count) {
    //参数判断
    var count = parseFloat(count );
    if (isNaN(count) || count<0){
        return 0;
    }
    function fibonacci(count) {
        if (count<=1){
            return 1;
        }
        //callee是装逼用的，直接用return fibonacci(count-1)+fibonacci(count-2)也行
        //return arguments.callee(count-1)+arguments.callee(count-2);
        return fibonacci(count-1)+fibonacci(count-2);
    }
    return fibonacci(count);
}



//fibonacci数列为：[0,1,1,2,3,5,8,13,21,34...]
//实现斐波那契列第n位的输出
function fibonacci(n){
    if(typeof n == "number" && n>=1){
        if(n===1){
            return 0;
        }else if(n===2){
            return 1;
        } else{
            return fibonacci(n-1)+fibonacci(n-2);
        }
    }
    else{
       console.log("请输入不小于1的整数！");
    }
}
fibonacci(4);//返回2

//fibonacci数列为：[0,1,1,2,3,5,8,13,21,34...]
//实现斐波那契列前n位的输出
function fibonacci(n){
    var fibona=[];
    if(typeof n == "number" && n>=1){
        fibona[0]=0;
        fibona[1]=1;
        for(var i=2;i<n;i++){
            fibona[i]=fibona[i-1]+fibona[i-2];
        }
        return fibona;
    }
    else{
        console.log("请输入不小于1的整数！");
    }
}
fibonacci(5);//返回3
