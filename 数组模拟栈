//栈的创建
function Stack(){
  var items=[];
  this.push=function(e){
    items.push(e);
  }
  this.pop=function(){
    return items.pop();
  }
  this.peek=function(){
    return items[items.length-1];
  }
  this.isEmpty=function(){
    return items.length==0;
  }
  this.size=function(){
    return items.length;
  }
  this.clear=function(){
    items=[];//以为可以多次调用pop方法，把数组中的元素全移除同样实现clear功能
  }
   this.print=function(){
    consloe.log(items.toString());
  }
}

var stack=new Stack();


//栈的应用：十进制转化成二进制
function divdeBy2(decNumber){
  var remStack=new Stack(),
  rem,
  binaryString="";
  while(decNumber>0){
    rem=Math.floor(decNumber%2);
    remStack.push(rem);
    decNumber=Math.floor(decNumber/2);
  }
  while(!remStack.isEmpty()){
    binaryString +=remStack.pop().toString();
  }
  return binaryString;
}




//栈的应用：十进制转化成任意进制
function baseConverter(decNumber,base){
  var remStack=new Stack(),
  rem,
  baseString="",
  digits="0123456789ABCDEF";
  while(decNumber>0){
    rem=Math.floor(decNumber%base);
    remStack.push(rem);
    decNumber=Math.floor(decNumber/base);
  }
  while(!remStack.isEmpty()){
    baseString +=digits[remStack.pop()];
  }
  return baseString;
}
